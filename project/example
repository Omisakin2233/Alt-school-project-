class Person :
    def __init__(self, name , id_number) ->None:
        self.name = name  #instance variable 
        self.id_number = id_number  #instance variable 

    def __str__(self)-> str:
        return f" name:{self.name} , id_number :{self.id_number}"

class Student(Person):
    def __init__(self,name ,id_number , major):
    
        super().__init__(name , id_number )
        self.major = major

    def __str__(self) -> str:
        return f"name: {self.name}, id_number: {self.id_number}, major: {self.major}"
    


class Course ():
     def __init__ (self ,course_id , course_name , enrolled_students ):
          self.course_id = course_id
          self.course_name = course_name 
          self.enrolled_students = enrolled_students 
         
         
     def __str__(self):
        return f"Course ID: {self.course_id}, course_name : {self.course_name}, enrolled_students : {self.enrolled_students}"

          
class Instructor(Person):
    def __init__(self, name ,id_number , department):
        super().__init__(name ,id_number)
        self.department = department

    def __str__(self) -> str:
           
        return "name: {}, id Number: {}, department: {}".format(self.name, self.id_number, self.department)

class Enrollment :
    def __init__(self, student ,course ,grade:float = None ) -> None:
        self.student = student 
        self.course = course 
        self.grade = None
    
    def assign_grade(self,grade):
        self.grade=grade 


    def __str__(self) -> str:
        return f"student :{self.student} , course :{self.course} , grade {self.grade}"
    
class StudentManagementSystem :
    def __init__(self):
        self.students = {}  # Dictionary to store students
        self.courses = {}   # Dictionary to store courses 
        self.enrollments= {}  # Dictionary to manage enrollments 
        self.grades = {}  # Dictionary to manage grades 
        self.instructors = {} #dictionary to manage instructors 

    def add_student (self, name , id_number, major )->None:
        student= Student (name ,   id_number ,  major )
        self.students [ id_number] = student 

    

    def remove_student (self, id_number ):
        if id_number in self.students:
            del self.students [id_number]


    def update_student(self, name=None, id_number = None, major=None):
        student_to_change = self.students[id_number]
        if name == None:
            name = student_to_change.name
        if major == None:
            major = student_to_change.major
        
        student = Student(name, id_number, major)
        self.students[id_number] = student

    def add_instrutor(self, name, id_number, department):
        instructor = Instructor(name, id_number, department)
        self.instructors[id_number] = instructor



    def remove_instructor (self , name , id_number , department ):
            instructor =  Instructor (name,id_number, department )
            if id_number in self.instructors:
                del self.students [id_number]

    # updating 
    def update_instructor (self , name= None , id_number = None, department=None ):
        instructor_to_update = self.instructors[id_number]
        if name == None:
            name = instructor_to_update.name 
        if department== None:
            department = instructor_to_update.department 
        
        instructor = Instructor (name , id_number , department )
        self.instructors[id_number] = instructor
    

    def add_course (self ,  course_id , course_name , enrolled_students ):
        course = Course (course_id, course_name , enrolled_students)
        self.courses[course_id] = course
    

    #This method is use to remove a course 
    def remove_course(self , course_name  , course_id , enrolled_students ):
        if course_id in self.courses:
            del self.courses[course_id]

    # update course 
    def update_course(self , course_id = None , course_name  = None , enrolled_students = None):
        course_to_update = self.courses[course_id]
        if course_name == None :
            course_name = course_to_update.course_name
        if enrolled_students == None:
            enrolled_students = course_to_update.enrolled_students 
        instructor = Instructor (course_id, course_name ,enrolled_students)
        #updating the instance of a course 
        self.courses[course_id] = Course(course_id, course_name, enrolled_students)



   # a method to enroll a student 
    def enroll_student(self, id_number , course_id):
        if id_number in self.students and course_id in self.courses:
            if id_number not in self.enrollments:
                self.enrollments[id_number ] = []
            if course_id not in self.enrollments[id_number] :
                self.enrollments[id_number ].append(course_id)
                print(f"Student {id_number } enrolled in course {course_id}.")
            else:
                print(f"Student {id_number } is already enrolled in course {course_id}.")
        else:
            print("Invalid student ID or course ID.")


#assigning grade 
    def assign_grade (self, id_number, course_id  , grade:float ) -> None:
       if (id_number,course_id ) in self.enrollments:
        self.enrollment[(id_number,course_id)].grade = grade 

    def get_students_in_course(self, course_id) -> list:
        students = []
        for student_id, enrolled_courses in self.enrollments.items():
            if course_id in enrolled_courses:
                student = self.students.get(student_id)
                if student:
                    students.append(student)
        return students

    def enroll_student_in_course(self, student, course_id):
        course = self.courses.get(course_id)
        if course:
            course.enroll_student(student)
        else:
            print("Course not found.")

    
    def get_courses_for_student(self, student):
        enrolled_courses = []
        for course in self.courses.values():
            if student in course.enrolled_students:
                enrolled_courses.append(course)
        return enrolled_courses








        
        





           


